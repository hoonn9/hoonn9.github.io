<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hoons Blog</title>
    <link>https://hoonn9.github.io/post/</link>
    <description>Recent content in Posts on Hoons Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <copyright>Copyright © 2022–2022, hoonn9; all rights reserved.</copyright>
    <lastBuildDate>Thu, 25 Aug 2022 15:17:29 +0900</lastBuildDate><atom:link href="https://hoonn9.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Nginx] Client IP와 X-Forwared-For</title>
      <link>https://hoonn9.github.io/post/nginx/x-forward-for/</link>
      <pubDate>Thu, 25 Aug 2022 15:17:29 +0900</pubDate>
      
      <guid>https://hoonn9.github.io/post/nginx/x-forward-for/</guid>
      <description>프로젝트 중에 Client IP를 알아야 하는 상황이 생겼다. 프로젝트의 구성은 다음과 같다.
AWS ELB -&amp;gt; Nginx -&amp;gt; API server
Nginx에서 트래픽을 요청한 Client의 IP를 $remote_addr 로 알 수 있다. 그러나 로드 밸런서를 앞단에 둔 환경에서는 $remote_addr로 제대로 된 Client의 IP를 얻을 수 없다.
로드 밸런서는 요청한 Client IP를 내 자신의 독립된 IP로 변환하기 때문에 EC2에 실행된 Nginx의 $remote_addr는 Client IP가 아닌 로드밸런서의 IP로 설정된다.
로드 밸런서는 이를 해결하기 위해 X-Forwarded-For 헤더로 기존에 요청한 Client IP를 보낸다.</description>
    </item>
    
    <item>
      <title>[NestJS] Graphql File Upload</title>
      <link>https://hoonn9.github.io/post/nodejs/nestjs/nestjs-graphql-file-upload/</link>
      <pubDate>Tue, 11 Jan 2022 20:56:29 +0900</pubDate>
      
      <guid>https://hoonn9.github.io/post/nodejs/nestjs/nestjs-graphql-file-upload/</guid>
      <description>graphql (apollo client)를 사용하는 프론트에서 파일 업로드 구현 중에 REST를 사용하지 않고 오직 Graphql로 파일 업로드를 해보고 싶다고 생각이 들었다. 작업 중이던 NestJS에 적용하다가 삽질했던거 공유해본다.
패키지 설치 NestJS npm install graphql-upload
React npm install apollo-upload-client
npm i -D @types/apollo-upload-client
apollo-upload-client mutation의 content-type을 json에서 multipart로 변환 및 operation, variables을 formData에 주입 해준다.
apollo client의 기존 httpLink를 createUploadLink하여 uploadLink로 대체해주는 것 만으로 적용 가능하다.
import { createUploadLink } from &amp;#34;apollo-upload-client&amp;#34;;  const httpLink = createUploadLink({  uri: GRAPHQL_URL,  credentials: &amp;#34;include&amp;#34;, });  const errorLink = onError(({ graphQLErrors, networkError }) =&amp;gt; {  // .</description>
    </item>
    
  </channel>
</rss>
